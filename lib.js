const fs = require('fs'),
      https = require('https'),
      csv = require('./convertCSV.js');

const omap = (o, f) => { const ot = {}; for (const k of Object.keys(o)) { ot[k] = f(k, o[k]); } return ot; };
const subdir = (p) => { try { fs.mkdirSync(p); } catch (e) { } };

const jw = e => JSON.stringify(e);
const jr = s => JSON.parse(s);

const almost = (a, b, spread = 0.1) => { return (a > b - spread) && (a < b + spread); };
const after = async (t, f) => {
  if (f) { setTimeout(f, t); } else { return new Promise(resolve => after(t, resolve)); }
};

const loadjson = (path, opts) => {
  try {
    return opts && opts.plain ?
      JSON.parse(String(fs.readFileSync(path))) :
      jr(String(fs.readFileSync(path)));
  } catch (e) { return null; }
};

const writejson = (path, v, opts) => {
  if (!opts) { opts = {}; }
  if (opts.append) {
    fs.writeFileSync(path, (opts.plain ? JSON.stringify(v) : jw(v)) + '\n', {flag: 'a+'});
  } else {
    fs.writeFileSync(path, (opts.plain ? JSON.stringify(v) : jw(v)));
  }
};

const loadchunkedjson = (path, opts) => {
  try { 
    const data = String(fs.readFileSync(path));
    return data.split('\n')
               .filter(line => line && line != '')
               .map(line => opts && opts.plain ? JSON.parse(line) : jr(line));
  } catch (e) { return null; }
};

const log = (...a) => {
  const t = Date.now();
  console.log('Log:', t, ...a);
  fs.writeFileSync('./data/log.txt', t.toString() + a.map(e => jw(e)).join('\t') + '\n', {flag: 'a+'});
};

const pickelt = (a) => a.length > 0 ? a[Math.floor(Math.random() * a.length)] : null;

const fe = (a, i) => a.length - (1 + i);
const isError = (e) => (e instanceof Error || (e && e.err));

const get = async (url) => {
  return new Promise((res) => {
    try {
      let out = '';
      const req = 
        https.get(url, r => {
          r.on('error', (e) => { log('Request', url, 'failed', e); res(null); })
           .on('data', (d) => { out += d; })
           .on('end', () => {
             res({headers: r.headers, body: out, code: r.statusCode});
           });
        });
      req.end();
    } catch (e) {
      log('Node HTTP lib broke.', e);
      return res(null);
    }
  });
};

const Trail = require('./static/trail.js').Trail;

const trails = loadjson('./static/trails.json');
const observations = csv.toJSON('inat/observations-2022.csv');
const obsCoords = observations.map((e, i) => [Number(e.latitude), Number(e.longitude), i]); // array of [lat, long] arrays
const sortedObs = obsCoords.sort((a, b) => a[0] - b[0]);

const fml = (cs) => {
  return [cs[0], cs[Math.floor(cs.length / 2)], cs[cs.length - 1]];
};

const distance = (x, y, x1, y1) => {
  return Math.sqrt(Math.pow(x1 - x, 2) + Math.pow(y1 - y, 2));
};

// coordinates is a list of all the coordinates in the trail
const observationsAround = (coordinates, rad) => {
  let res = [];
  for (let i = 0; i < coordinates.length; i++) {
    for (let j = 0; j < sortedObs.length; j++) {
      if (distance(coordinates[i][0], coordinates[i][1], sortedObs[j][0], sortedObs[j][1]) <= rad) {
        res.push(sortedObs[j]);
      }
    }
  }
  return Array.from(new Set(res)).map(e => observations[e[2]]);
};
test = [[39.14447671120448,-105.12421118204271],[39.144440060937825,-105.12475304609298],[39.144479954877184,-105.12537294804328],[39.144451598648416,-105.12580615359283],[39.14434495187258,-105.126031420782],[39.14325803355137,-105.12751884387337],[39.14274251322587,-105.12793230881334],[39.14266081784527,-105.12797377281727],[39.14251263744683,-105.12800782614703],[39.14224678614592,-105.12802868278625],[39.1419946104322,-105.12790563645967],[39.14180552960097,-105.12775631032468],[39.14163439341551,-105.12768837690577],[39.14154030843387,-105.12762314024214],[39.140896182211776,-105.12702963614328],[39.14059897171499,-105.12688554756139],[39.140454818638204,-105.12686250480978],[39.14017985905934,-105.12697266772555],[39.14005817711396,-105.12699341632121],[39.139814959625376,-105.12691704885788],[39.13963484943194,-105.12681366065873],[39.13953572873879,-105.12680371674548],[39.139107588409026,-105.12690601278982],[39.13881455294823,-105.12705699846151],[39.1387109029936,-105.12707706152713],[39.13860731757456,-105.12703709405508],[39.138521807774154,-105.12694979893274],[39.138332895647075,-105.12664572085549],[39.138197890215075,-105.12649686131438],[39.13813485592179,-105.12645660882391],[39.13773396258332,-105.1263622367941],[39.137229419282285,-105.12627962179867],[39.137121281898416,-105.12628303872678],[39.13669307990837,-105.12643413971864],[39.13604841257867,-105.12675805204299],[39.135746517175605,-105.12678752484085],[39.13489514744569,-105.12660231731772],[39.13469238962625,-105.12660883863468],[39.13457979964939,-105.12656341993387],[39.13438636709415,-105.12627199819934],[39.13424232882512,-105.12615098138059],[39.13416126192258,-105.1261117869056],[39.13353063228822,-105.12596422939932],[39.133147659293115,-105.12595522816764],[39.13273325668961,-105.12585325169033],[39.13242689255198,-105.1258302952182],[39.132291701129056,-105.12585355332894],[39.1320888643943,-105.12593309458279],[39.13171018106686,-105.12612370560643],[39.13154335343946,-105.1262358326713],[39.13138562495255,-105.12627496961348],[39.131146921170426,-105.12617366600962],[39.13081811068351,-105.12608450110582],[39.13072808041381,-105.12601021313104],[39.13062463115429,-105.12584371374723],[39.1305255031887,-105.12584028623773],[39.13020548143134,-105.12595685965697],[39.13006129313955,-105.12596599737553],[39.1298992192685,-105.12584855466146],[39.129723544241074,-105.12580089923314],[39.129606582807874,-105.1256390757653],[39.12957064495426,-105.12553162317435],[39.12954376367891,-105.12539023008411],[39.129598058217624,-105.12517844119131],[39.12953503617053,-105.12512626659445],[39.12948560643047,-105.12500361126318],[39.1294902189643,-105.12490383199768],[39.12955798560382,-105.12473293035724],[39.129576136254634,-105.12461292808536],[39.12954036300198,-105.12435038634429],[39.12955412632799,-105.12411900765007],[39.12951369280426,-105.12400939608791],[39.12933826573904,-105.12373611692965],[39.12929793842453,-105.12352597850817],[39.12932955668691,-105.12345119045231],[39.129257511236325,-105.12340985405456],[39.12879334944426,-105.12348388673543],[39.12823914784063,-105.12349014984437],[39.12786973215553,-105.1234508286159],[39.12776157609346,-105.12346328502625],[39.12759480492622,-105.1235244497045],[39.1273513307043,-105.12367913277554],[39.127094294211396,-105.12389343007564],[39.12697328194564,-105.12396684063903],[39.126627631009335,-105.12402199774839],[39.12649264329551,-105.1239276513037],[39.12640942226725,-105.12389910229345],[39.12632598503616,-105.12397813461591],[39.12607542417458,-105.12444009662775],[39.12593521676469,-105.12494816751841],[39.125926040050985,-105.12510252767817],[39.12580872167586,-105.12526392686509],[39.12576779735008,-105.12561995813313],[39.12579461585187,-105.1258025869565],[39.12573593808721,-105.12590840780969],[39.12572682186769,-105.1260056400905],[39.125722194428825,-105.1261191578475],[39.1257080733208,-105.12631281633821],[39.12572459362467,-105.12647723237829],[39.12566757601411,-105.12662701747323],[39.12562026561652,-105.12676549143843],[39.1256256013109,-105.12695245480505],[39.125571202216115,-105.12712493412482],[39.12554983055371,-105.12726606071877],[39.12556138631237,-105.12764860299016],[39.125627869247324,-105.12779215450121],[39.125670590569165,-105.128000474762],[39.1257154826063,-105.12814951765709],[39.12579601896468,-105.12866158967753],[39.1258137872501,-105.12890946948922],[39.125925262635434,-105.12920722201872],[39.12601009869936,-105.12923276283665],[39.12605847296043,-105.12934112429015],[39.12598102167002,-105.1295694896922],[39.12588055192319,-105.12963824508613],[39.12569083498367,-105.13006342585295],[39.12559292502109,-105.13023545376174],[39.12552391739796,-105.13025254816083],[39.12547327683442,-105.13030545780309],[39.125466976183525,-105.13039575763334],[39.12550098865877,-105.13061079485038],[39.12549339200902,-105.13091386290142],[39.125542881776255,-105.13101769754911],[39.12543567455621,-105.13122569619624],[39.12541822617954,-105.13138895637746],[39.12542138221303,-105.1318802328234],[39.12530112170952,-105.13205799216527],[39.125213648940985,-105.13231674560667],[39.12527507392031,-105.13251866203191],[39.12531342599376,-105.13269875479436],[39.125132694721735,-105.13356814042808],[39.12504251880672,-105.1338481289488],[39.12486182059636,-105.1340372642183],[39.12478499677011,-105.13423703880197],[39.124631494595754,-105.13450030694995],[39.124581756440605,-105.13465421558888],[39.12429719442616,-105.13526790266468],[39.12418894863314,-105.13536350751228],[39.123934858078265,-105.13571474276246],[39.12377395925221,-105.13576509301207],[39.12362515034445,-105.13587217550361],[39.12319194294177,-105.13644723602378],[39.123070186291535,-105.1365377444891],[39.12300242521579,-105.13668909153607],[39.122943802764844,-105.13673164281437],[39.12273174079633,-105.13697922571569],[39.1225015147216,-105.13735439460854],[39.12251934221436,-105.1375196493217],[39.1224787161555,-105.13758391381815],[39.12241983580641,-105.13784445843163],[39.122352136354976,-105.1379422991659],[39.12234753708391,-105.13802145266307],[39.12228426208375,-105.13818762459529],[39.122238955904436,-105.13839867037348],[39.12219784170127,-105.13887289275459],[39.12215707259779,-105.139055743107],[39.12219750629842,-105.1391541536705],[39.122156672434855,-105.13939231203639],[39.12217400714128,-105.13997293893124],[39.122115327039765,-105.14006247750582],[39.12211502968049,-105.1403097503543],[39.12208791095281,-105.14038055266369],[39.12194334218455,-105.14070417869905],[39.121771791732705,-105.1409767797222],[39.121645294428994,-105.14125923301181],[39.12158195293692,-105.14147565278628],[39.12143292127969,-105.14176166855415],[39.121360540680335,-105.14199360521056],[39.121057754579724,-105.14274783237056],[39.12094038338412,-105.14293232738522],[39.120836641747246,-105.14302466286777],[39.12076427741082,-105.14324864900576],[39.12069662097929,-105.14330779858632],[39.12055667730882,-105.14352044895155],[39.120136747152955,-105.1442585044791],[39.11974822445011,-105.1450913340837],[39.119513553692975,-105.14539668547546],[39.11940078315124,-105.14550165220261],[39.119224906969485,-105.14562853707177],[39.11911671044957,-105.1456785766723],[39.119040025373934,-105.14575070621133],[39.11876461603114,-105.14620490367025],[39.11840320535261,-105.14696437704814],[39.118272391030274,-105.147085207734],[39.11819553295586,-105.14729362524425],[39.11794719316157,-105.14771461077486],[39.11760823673789,-105.14853123565148],[39.11750847659188,-105.14902987867838],[39.11734554626989,-105.14959996688246],[39.11715113563247,-105.15012155236603],[39.11690657801478,-105.15109379034897],[39.11682062503129,-105.1513542452582],[39.116459605371716,-105.15179483944733],[39.116220474617215,-105.15205170063624],[39.116125538135755,-105.15229622738568],[39.11612086958061,-105.15242092511342],[39.11616110471489,-105.15266176353161],[39.11614999991345,-105.15287038024286]];
console.log(observationsAround(test, 0.25));
//const trailCoords = (trails.features).map(e => e.geometry); // not working

const trailFromID = (id, withobservations = false) => {
  const trail = trails.features[id];
  return new Trail({trail,
                    observations: withobservations ? observationsAround(trail.geometry.coordinates, 0.01) : []});
};

module.exports = {
  omap, subdir, jw, jr, after, loadjson, writejson, loadchunkedjson, log, pickelt, fe, isError, get, almost,
  trails, fml, distance, observationsAround, Trail, trailFromID,
};
